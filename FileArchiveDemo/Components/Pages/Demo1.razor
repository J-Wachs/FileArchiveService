@page "/demo1"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using FileArchive
@using FileArchive.Interfaces
@using FileArchive.Models
@using FileArchive.Services
@using FileArchive.Utils
@inject IConfiguration config

@inject IFileArchiveStorage fileArchiveStorage
@inject IFileArchiveFileInfoCRUD fileArchiveFileInfoCRUD

<PageTitle>Demo 1: List with add</PageTitle>

<h1>Demo 1: List with add option</h1>

<p>This demo shows:</p>
<ul>
    <li>The user can add multple files</li>
    <li>The user can delete files</li>
    <li>The description of each file is displayed and the user can edit/enter it</li>
    <li>Each file must be less than or equal to 20000 bytes in size</li>
    <li>There is no limit to the maximum number of files</li>
    <li>Filetypes allowed are PNG, JPG and JPEG</li>
    <li>The user can download the files one at the time</li>
</ul>
<br />

@if (!string.IsNullOrEmpty(Message))
{
    <span style="color: red; font-weight: bold;">@Message</span>
}

<EditForm Model="DemoUIModel" OnValidSubmit="SubmitForm" class="form-control">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="demouimodel-description" class="col-sm-2 col-form-label">Report description:</label>
        <div class="col-sm-10">
            <InputText id="demouimodel-description" @bind-Value="DemoUIModel.Description"></InputText>
        </div>
    </div>
    <div class="form-group row">
        <label for="demouimodel-date" class="col-sm-2 col-form-label">Date:</label>
        <div class="col-sm-10">
            <InputDate id="demouimodel-date" @bind-Value="DemoUIModel.Date"></InputDate>
        </div>
    </div>
    <div class="form-group row">
        <br/>
    </div>
    <div class="form-group row">
        <label for="demouimodel-files" class="col-sm-2 col-form-label">Files:</label>
        <div class="col-sm-10">
            <FileArchiveList @ref="FileArchiveComponent" Files="DemoUIModel.Files"
                             FileTypesAccepted=".png,.jpg,.jpeg"
                             AllowSelectMultipleFiles="true"
                             AllowAdd="true"
                             AllowUpdate="true"
                             AllowUpdateOnNew="true"
                             AllowDownload="true"
                             AllowDelete="true"
                             DisplayDescription="true"
                             DisplayExistingFiles="true"
                             MaxFileSize="20000"
                             Height="300px">
            </FileArchiveList>
            <ValidationMessage For="@(() => DemoUIModel.Files)"/>
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary mt-3">Submit form</button>
        </div>
    </div>
</EditForm>

@code {
    private FileArchiveList? FileArchiveComponent;

    private string Message = string.Empty;
    private class DemoFieldsForUI
    {
        public string? Description { get; set; } = "Demo 1";
        public DateTime Date { get; set; } = DateTime.Now.Date;

        public List<FileArchiveFileInfoUI> Files { get; set; }

        public DemoFieldsForUI()
        {
            Files = [];
        }
    }

    [SupplyParameterFromForm]
    DemoFieldsForUI DemoUIModel { get; set; } = new();

    private IFileArchiveCRUD? fileArchiveCRUD;

    private long reportId = 4712; // In a real-world application,
    // the Id is returned by e.g.
    // the SQL server.

    private string userId = "8888-9999";

    protected override void OnInitialized()
    {
        fileArchiveCRUD = new FileArchiveCRUD(fileArchiveFileInfoCRUD,
                                              fileArchiveStorage);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && fileArchiveCRUD is not null)
        {
            string parentKey = reportId.ToString();
            Result<List<FileArchiveFileInfoUI>> getListOfFilesResult = await fileArchiveCRUD.GetListOfFileInfoUIForArchive(parentKey);
            if (getListOfFilesResult.IsSuccess is false)
            {
                Message = String.Join(", ", getListOfFilesResult.Messages);
            }
            else
            {
                Message = string.Empty;
                DemoUIModel.Files = getListOfFilesResult.Data!;
            }
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }


    private async Task SubmitForm()
    {
        // If the component is used in a CREATE situation, then
        // you must do what is nessecary to establish the key that
        // is going to be the ParentKey for the files.
        // That is, in this example we are to create an incident
        // report. Data must be written to the storage (database),
        // and the key must be obtained, as it will serve as a
        // parent key for the storage of information for the files.

        // Save Incident report data
        //

        // Obtain key
        // reportId = ....

        // Store files
        string parentKey = reportId.ToString();
        var result = await fileArchiveCRUD!.CreateUpdateDeleteArchiveFromUI(parentKey, FileArchiveComponent!, userId);
    }
}
